#include <vector>
#include <iostream>
#include <queue>

using namespace std;

class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        int res  = 0;
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if(grid[i][j] == 1){
                    for(int d = 0; d < 4; d++){
                        int ni = i + dxs[d];
                        int nj = j + dys[d];
                        if(ni < 0 || ni >= rows || nj < 0 || nj >= cols || grid[ni][nj] == 0)
                            res++;
                    }
                }
            }
        }

        return res;
    }

   
    int dxs[4] = {0, 0, 1, -1};
    int dys[4] = {1, -1, 0, 0};
    
};


int main(){
    vector<vector<int>> grid = {
        {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,0},
        {0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0},
        {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0},
        {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
        {1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
        {1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
        {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
        {0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
        {0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0}};

        Solution s = {};

        cout << s.islandPerimeter(grid) << endl;

}